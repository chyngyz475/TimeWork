// –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
let userProfile = {
    name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
    email: 'user@example.com',
    level: 1,
    experience: 0,
    totalSessions: 0,
    totalHours: 0,
    totalTasks: 0,
    currentStreak: 0,
    settings: {
        sounds: true,
        notifications: true,
        sync: false
    }
};

let weeklyStats = {
    focusHours: 0,
    completedTasks: 0,
    sessions: []
};

let garden = {
    trees: [],
    level: 1,
    totalTrees: 0
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è
document.addEventListener('DOMContentLoaded', function() {
    loadUserProfile();
    loadWeeklyStats();
    loadGarden();
    updateProfileDisplay();
    updateWeeklyStats();
    updateGarden();
    setupEventListeners();
    generateAIMessage();
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function loadUserProfile() {
    const saved = localStorage.getItem('userProfile');
    if (saved) {
        userProfile = { ...userProfile, ...JSON.parse(saved) };
    }
    
    const savedSettings = localStorage.getItem('userSettings');
    if (savedSettings) {
        userProfile.settings = { ...userProfile.settings, ...JSON.parse(savedSettings) };
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
function saveUserProfile() {
    localStorage.setItem('userProfile', JSON.stringify(userProfile));
    localStorage.setItem('userSettings', JSON.stringify(userProfile.settings));
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function loadWeeklyStats() {
    const saved = localStorage.getItem('weeklyStats');
    if (saved) {
        weeklyStats = JSON.parse(saved);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–µ—Å—Å–∏–π
    updateWeeklyStatsFromHistory();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Å–µ—Å—Å–∏–π
function updateWeeklyStatsFromHistory() {
    const sessionHistory = JSON.parse(localStorage.getItem('sessionHistory') || '[]');
    const taskHistory = JSON.parse(localStorage.getItem('taskHistory') || '[]');
    
    const now = new Date();
    const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–µ—Å—Å–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
    const weekSessions = sessionHistory.filter(session => 
        new Date(session.startTime) >= weekAgo
    );
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤ —Ñ–æ–∫—É—Å–µ (—Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–∞)
    const focusTime = weekSessions
        .filter(s => s.type === 'work')
        .reduce((total, session) => total + session.duration, 0);
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    const completedTasks = taskHistory.filter(task => 
        task.completed && new Date(task.completedAt) >= weekAgo
    ).length;
    
    weeklyStats = {
        focusHours: focusTime,
        completedTasks: completedTasks,
        sessions: weekSessions
    };
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userProfile.totalSessions = sessionHistory.length;
    userProfile.totalHours = sessionHistory
        .filter(s => s.type === 'work')
        .reduce((total, session) => total + session.duration, 0);
    userProfile.totalTasks = taskHistory.filter(t => t.completed).length;
    
    // –í—ã—á–∏—Å–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∏ –æ–ø—ã—Ç
    updateUserLevel();
    
    saveUserProfile();
    localStorage.setItem('weeklyStats', JSON.stringify(weeklyStats));
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function updateUserLevel() {
    const totalMinutes = Math.floor(userProfile.totalHours / 60);
    const newLevel = Math.floor(totalMinutes / 100) + 1; // 100 –º–∏–Ω—É—Ç = 1 —É—Ä–æ–≤–µ–Ω—å
    
    if (newLevel > userProfile.level) {
        userProfile.level = newLevel;
        showLevelUpNotification();
    }
    
    userProfile.experience = totalMinutes % 100;
}

// –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
function showLevelUpNotification() {
    const notification = document.createElement('div');
    notification.className = 'level-up-notification';
    notification.innerHTML = `
        <div class="notification-content">
            <h3>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</h3>
            <p>–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ ${userProfile.level} —É—Ä–æ–≤–Ω—è!</p>
        </div>
    `;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
        notification.classList.add('show');
    }, 100);
    
    setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => notification.remove(), 300);
    }, 3000);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∞–¥–∞
function loadGarden() {
    const saved = localStorage.getItem('garden');
    if (saved) {
        garden = JSON.parse(saved);
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ä–µ–≤—å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ—Å—Å–∏–π
    generateTreesFromSessions();
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ä–µ–≤—å–µ–≤ –∏–∑ —Å–µ—Å—Å–∏–π
function generateTreesFromSessions() {
    const sessionHistory = JSON.parse(localStorage.getItem('sessionHistory') || '[]');
    const workSessions = sessionHistory.filter(s => s.type === 'work');
    
    garden.trees = workSessions.map((session, index) => ({
        id: session.id,
        type: getTreeType(session.duration),
        size: getTreeSize(session.duration),
        position: { x: (index % 5) * 20 + 10, y: Math.floor(index / 5) * 20 + 10 },
        createdAt: session.startTime
    }));
    
    garden.totalTrees = garden.trees.length;
    garden.level = Math.floor(garden.totalTrees / 10) + 1;
    
    localStorage.setItem('garden', JSON.stringify(garden));
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–µ—Ä–µ–≤–∞ –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏
function getTreeType(duration) {
    if (duration < 900) return 'small'; // < 15 –º–∏–Ω
    if (duration < 1800) return 'medium'; // < 30 –º–∏–Ω
    if (duration < 3600) return 'large'; // < 60 –º–∏–Ω
    return 'huge'; // > 60 –º–∏–Ω
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –¥–µ—Ä–µ–≤–∞
function getTreeSize(duration) {
    return Math.min(100, Math.max(20, duration / 30)); // 20-100px
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
function updateProfileDisplay() {
    document.getElementById('userName').textContent = userProfile.name;
    document.getElementById('userEmail').textContent = userProfile.email;
    document.getElementById('userLevel').textContent = getLevelName(userProfile.level);
    document.getElementById('levelBadge').textContent = userProfile.level;
    document.getElementById('userInitials').textContent = userProfile.name.charAt(0).toUpperCase();
    
    document.getElementById('totalSessions').textContent = userProfile.totalSessions;
    document.getElementById('totalHours').textContent = formatDuration(userProfile.totalHours);
    document.getElementById('totalTasks').textContent = userProfile.totalTasks;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    updateSettingToggles();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateWeeklyStats() {
    document.getElementById('weeklyFocusHours').textContent = formatDuration(weeklyStats.focusHours);
    document.getElementById('weeklyCompletedTasks').textContent = weeklyStats.completedTasks;
    document.getElementById('currentStreak').textContent = calculateStreak();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∞–¥–∞
function updateGarden() {
    const gardenGrid = document.getElementById('gardenGrid');
    gardenGrid.innerHTML = '';
    
    garden.trees.forEach(tree => {
        const treeElement = document.createElement('div');
        treeElement.className = `tree tree-${tree.type}`;
        treeElement.style.left = `${tree.position.x}%`;
        treeElement.style.top = `${tree.position.y}%`;
        treeElement.style.width = `${tree.size}px`;
        treeElement.style.height = `${tree.size}px`;
        treeElement.title = `–°–µ—Å—Å–∏—è ${formatDuration(tree.size * 30)}`;
        
        treeElement.innerHTML = getTreeEmoji(tree.type);
        gardenGrid.appendChild(treeElement);
    });
    
    document.getElementById('totalTrees').textContent = garden.totalTrees;
    document.getElementById('forestLevel').textContent = garden.level;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–µ—Ä–µ–≤–∞
function getTreeEmoji(type) {
    const emojis = {
        small: 'üå±',
        medium: 'üåø',
        large: 'üå≥',
        huge: 'üå≤'
    };
    return emojis[type] || 'üå±';
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è AI
function generateAIMessage() {
    const messages = [
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª —Ç–≤–æ—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. –†–µ–∫–æ–º–µ–Ω–¥—É—é —Å–¥–µ–ª–∞—Ç—å 15-–º–∏–Ω—É—Ç–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤ –ø–æ—Å–ª–µ —Å–ª–µ–¥—É—é—â–µ–π —Å–µ—Å—Å–∏–∏.",
        "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –¢—ã —É–∂–µ –ø—Ä–æ–≤–µ–ª " + formatDuration(weeklyStats.focusHours) + " –≤ —Ñ–æ–∫—É—Å–µ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ.",
        "–ó–∞–º–µ—Ç–∏–ª, —á—Ç–æ —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å –ª—É—á—à–µ –≤ —É—Ç—Ä–µ–Ω–Ω–∏–µ —á–∞—Å—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è.",
        "–¢–≤–æ—è —Å–µ—Ä–∏—è –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥: " + calculateStreak() + ". –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
        "–†–µ–∫–æ–º–µ–Ω–¥—É—é —Å–¥–µ–ª–∞—Ç—å –¥–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤ (30+ –º–∏–Ω—É—Ç) - —Ç—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–ª " + formatDuration(weeklyStats.focusHours) + " —Å–µ–≥–æ–¥–Ω—è.",
        "–û—Ç–ª–∏—á–Ω—ã–π –±–∞–ª–∞–Ω—Å —Ä–∞–±–æ—Ç—ã –∏ –æ—Ç–¥—ã—Ö–∞! –¢–≤–æ—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–∞—Å—Ç–µ—Ç."
    ];
    
    const randomMessage = messages[Math.floor(Math.random() * messages.length)];
    document.getElementById('aiMessage').textContent = randomMessage;
}

// –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ AI
function analyzePatterns() {
    const sessionHistory = JSON.parse(localStorage.getItem('sessionHistory') || '[]');
    
    if (sessionHistory.length < 5) {
        document.getElementById('aiMessage').textContent = "–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ü—Ä–æ–¥–æ–ª–∂–∞–π —Ä–∞–±–æ—Ç–∞—Ç—å!";
        return;
    }
    
    // –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –¥–Ω—è
    const hourStats = {};
    sessionHistory.forEach(session => {
        const hour = new Date(session.startTime).getHours();
        hourStats[hour] = (hourStats[hour] || 0) + session.duration;
    });
    
    const bestHour = Object.keys(hourStats).reduce((a, b) => 
        hourStats[a] > hourStats[b] ? a : b
    );
    
    // –ê–Ω–∞–ª–∏–∑ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–π
    const avgDuration = sessionHistory.reduce((sum, s) => sum + s.duration, 0) / sessionHistory.length;
    
    let analysis = `–ê–Ω–∞–ª–∏–∑ —Ç–≤–æ–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤:\n`;
    analysis += `‚Ä¢ –õ—É—á—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞–±–æ—Ç—ã: ${bestHour}:00\n`;
    analysis += `‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏: ${formatDuration(avgDuration)}\n`;
    analysis += `‚Ä¢ –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: ${sessionHistory.length}\n`;
    
    if (avgDuration > 3600) {
        analysis += `\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü–æ–ø—Ä–æ–±—É–π –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–µ—Å—Å–∏–∏ (25-30 –º–∏–Ω) –¥–ª—è –ª—É—á—à–µ–≥–æ —Ñ–æ–∫—É—Å–∞.`;
    } else if (avgDuration < 900) {
        analysis += `\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –£–≤–µ–ª–∏—á—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–π –¥–æ 25+ –º–∏–Ω—É—Ç –¥–ª—è –≥–ª—É–±–æ–∫–æ–π —Ä–∞–±–æ—Ç—ã.`;
    }
    
    document.getElementById('aiMessage').textContent = analysis;
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // AI –∫–Ω–æ–ø–∫–∏
    document.getElementById('askAI').addEventListener('click', generateAIMessage);
    document.getElementById('analyzePattern').addEventListener('click', analyzePatterns);
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    document.getElementById('soundToggle').addEventListener('click', () => {
        userProfile.settings.sounds = !userProfile.settings.sounds;
        updateSettingToggles();
        saveUserProfile();
    });
    
    document.getElementById('notificationToggle').addEventListener('click', () => {
        userProfile.settings.notifications = !userProfile.settings.notifications;
        updateSettingToggles();
        saveUserProfile();
        
        if (userProfile.settings.notifications) {
            requestNotificationPermission();
        }
    });
    
    document.getElementById('syncToggle').addEventListener('click', () => {
        userProfile.settings.sync = !userProfile.settings.sync;
        updateSettingToggles();
        saveUserProfile();
        
        if (userProfile.settings.sync) {
            syncWithServer();
        }
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π –Ω–∞—Å—Ç—Ä–æ–µ–∫
function updateSettingToggles() {
    const toggles = {
        soundToggle: userProfile.settings.sounds,
        notificationToggle: userProfile.settings.notifications,
        syncToggle: userProfile.settings.sync
    };
    
    Object.entries(toggles).forEach(([id, isActive]) => {
        const toggle = document.getElementById(id);
        toggle.classList.toggle('active', isActive);
    });
}

// –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function requestNotificationPermission() {
    if ('Notification' in window) {
        Notification.requestPermission().then(permission => {
            if (permission === 'granted') {
                console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω—ã');
            }
        });
    }
}

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º (–∑–∞–≥–ª—É—à–∫–∞)
function syncWithServer() {
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º
    console.log('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º...');
    
    // –ò–º–∏—Ç–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    setTimeout(() => {
        alert('–î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å –æ–±–ª–∞–∫–æ–º!');
    }, 1000);
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function formatDuration(seconds) {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    
    if (hours > 0) {
        return `${hours}—á ${minutes}–º`;
    } else {
        return `${minutes}–º`;
    }
}

function getLevelName(level) {
    const names = ['–ù–æ–≤–∏—á–æ–∫', '–£—á–µ–Ω–∏–∫', '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç', '–≠–∫—Å–ø–µ—Ä—Ç', '–ú–∞—Å—Ç–µ—Ä', '–ì—É—Ä—É'];
    return names[Math.min(level - 1, names.length - 1)] || '–õ–µ–≥–µ–Ω–¥–∞';
}

function calculateStreak() {
    const sessionHistory = JSON.parse(localStorage.getItem('sessionHistory') || '[]');
    if (sessionHistory.length === 0) return 0;
    
    const dates = [...new Set(sessionHistory.map(s => 
        new Date(s.startTime).toDateString()
    ))].sort((a, b) => new Date(b) - new Date(a));
    
    let streak = 0;
    const today = new Date();
    
    for (let i = 0; i < dates.length; i++) {
        const date = new Date(dates[i]);
        const expectedDate = new Date(today);
        expectedDate.setDate(today.getDate() - i);
        
        if (date.toDateString() === expectedDate.toDateString()) {
            streak++;
        } else {
            break;
        }
    }
    
    return streak;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Å—Ç–∏—Ü
const canvas = document.getElementById("particleCanvas");
const ctx = canvas.getContext("2d");
canvas.width = window.innerWidth;
canvas.height = window.innerHeight;

const particles = [];

class Particle {
    constructor(x, y) {
        this.x = x;
        this.y = y;
        this.size = Math.random() * 3 + 1;
        this.speedX = Math.random() * 2 - 1;
        this.speedY = Math.random() * 2 - 1;
        this.life = 120;
        this.maxLife = 120;
    }

    update() {
        this.x += this.speedX;
        this.y += this.speedY;
        this.life--;
        this.size *= 0.98;
    }

    draw() {
        const alpha = this.life / this.maxLife;
        ctx.fillStyle = `rgba(99, 102, 241, ${alpha * 0.3})`;
        ctx.beginPath();
        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
        ctx.fill();
    }
}

function createParticles(x, y) {
    for (let i = 0; i < 5; i++) {
        particles.push(new Particle(x, y));
    }
}

function animateParticles() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    
    if (Math.random() < 0.1) {
        createParticles(
            Math.random() * canvas.width,
            Math.random() * canvas.height
        );
    }
    
    for (let i = particles.length - 1; i >= 0; i--) {
        particles[i].update();
        particles[i].draw();
        if (particles[i].life <= 0) particles.splice(i, 1);
    }
    requestAnimationFrame(animateParticles);
}

animateParticles();

window.addEventListener("resize", () => {
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
});

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
window.updateUserStats = function() {
    updateWeeklyStatsFromHistory();
    updateProfileDisplay();
    updateWeeklyStats();
    updateGarden();
};
